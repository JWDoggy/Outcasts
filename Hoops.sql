DROP SCHEMA IF EXISTS Hoops;
CREATE SCHEMA Hoops;
use Hoops;


CREATE TABLE Content (
    Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    Genre VARCHAR(255) NOT NULL,
    Title VARCHAR(100) NOT NULL,
    Release_Date DATE NOT NULL,
     Content_Type ENUM('Movie', 'Series') NOT NULL
);

CREATE TABLE Movie (
    Id INT PRIMARY KEY NOT NULL,
    Length INT NOT NULL,
    FOREIGN KEY (Id) REFERENCES Content(Id) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE Series (
    Id INT PRIMARY KEY NOT NULL,
    FOREIGN KEY (Id) REFERENCES Content(Id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE TABLE Season (
    Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    Series_Id INT NOT NULL,
    Season_Number INT NOT NULL,
    Number_of_Episodes INT NOT NULL,
    FOREIGN KEY (Series_Id) REFERENCES Series(Id) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE users (
    Id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Surname VARCHAR(100) NOT NULL,
    DOB DATE NOT NULL
    Is_Main_User BOOLEAN NOT NULL DEFAULT FALSE
);
CREATE TABLE Account (
    Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    User_Id INT NOT NULL,
    Account_Details VARCHAR(255),
    Account_Type ENUM('Single', 'Family') NOT NULL,
    FOREIGN KEY (User_Id) REFERENCES users(Id) ON DELETE CASCADE ON UPDATE CASCADE
    CONSTRAINT FK_Account_Main_User CHECK ((SELECT Is_Main_User FROM users WHERE Id = User_Id) = TRUE)
);

CREATE TABLE SingleAccount (
    Account_Id INT PRIMARY KEY NOT NULL,
    FOREIGN KEY (Account_Id) REFERENCES Account(Id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE FamilyAccount (
    Id INT PRIMARY KEY NOT NULL,
    Family_Name VARCHAR(255), 
    FOREIGN KEY (Id) REFERENCES Account(Id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Family (
    User_Id INT PRIMARY KEY NOT NULL,
    Family_Id INT NOT NULL,
        Member_Name VARCHAR(100) NOT NULL,
    Member_Image VARCHAR(255),  
    FOREIGN KEY (Family_Id) REFERENCES FamilyAccount(Id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (User_Id) REFERENCES users(Id) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE Login (
     Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    User_Id INT NOT NULL,
    Email VARCHAR(100) NOT NULL UNIQUE,
    Password VARCHAR(100) NOT NULL,
    FOREIGN KEY (User_Id) REFERENCES users(Id) ON DELETE CASCADE ON UPDATE CASCADE
    CONSTRAINT FK_Login_Main_User CHECK ((SELECT Is_Main_User FROM users WHERE Id = User_Id) = TRUE)
);


CREATE TABLE Person (
    Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Surname VARCHAR(100) NOT NULL
);

CREATE TABLE Studio (
    Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL
);


CREATE TABLE Friends (
    Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    User_Id INT NOT NULL,
    Friend_Id INT NOT NULL,
    FOREIGN KEY (User_Id) REFERENCES users(Id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (Friend_Id) REFERENCES users(Id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Favourite (
    Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    User_Id INT NOT NULL,
    Content_Id INT NOT NULL,
    FOREIGN KEY (User_Id) REFERENCES users(Id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (Content_Id) REFERENCES Content(Id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Review (
    Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    User_Id INT NOT NULL,
    Content_Id INT NOT NULL,
    Rating INT NOT NULL,
    Comments TEXT NOT NULL,
    FOREIGN KEY (User_Id) REFERENCES users(Id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (Content_Id) REFERENCES Content(Id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Awards (
    Movie_Id INT NOT NULL,
    Award_Name VARCHAR(100) NOT NULL,
    FOREIGN KEY (Movie_Id) REFERENCES Content(Id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Worked_in (
    Studio_Id INT NOT NULL,
    Person_Id INT NOT NULL,
    Content_Id INT NOT NULL,
    FOREIGN KEY (Studio_Id) REFERENCES Studio(Id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (Person_Id) REFERENCES Person(Id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (Content_Id) REFERENCES Content(Id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Interacts (
    Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    User_Id INT NOT NULL,
    Content_Id INT NOT NULL,
    Favourite_Id INT,
    Review_Id INT,
    FOREIGN KEY (User_Id) REFERENCES users(Id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (Content_Id) REFERENCES Content(Id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (Favourite_Id) REFERENCES Favourite(Id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (Review_Id) REFERENCES Review(Id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Child (
    User_Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    View_Filter VARCHAR(100) NOT NULL,
    FOREIGN KEY (User_Id) REFERENCES users(Id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Teen (
    User_Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    View_Filter VARCHAR(100) NOT NULL,
    FOREIGN KEY (User_Id) REFERENCES users(Id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Adult (
    User_Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    View_Filter VARCHAR(100) NOT NULL,
    FOREIGN KEY (User_Id) REFERENCES users(Id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Actor (
    Person_Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    Role VARCHAR(100),
    FOREIGN KEY (Person_Id) REFERENCES Person(Id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Director (
    Person_Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    Projects_Made INT NOT NULL, 
    FOREIGN KEY (Person_Id) REFERENCES Person(Id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Independent (
    Studio_Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    Bio TEXT NOT NULL,
    Contact_Number VARCHAR(20) NOT NULL,
    FOREIGN KEY (Studio_Id) REFERENCES Studio(Id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE Production (
    Studio_Id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    Website VARCHAR(255) NOT NULL,
    City VARCHAR(255) NOT NULL,
    Street VARCHAR(255) NOT NULL,
      FOREIGN KEY (Studio_Id) REFERENCES Studio(Id) ON DELETE CASCADE ON UPDATE CASCADE
);

DELIMITER //
CREATE FUNCTION user_exists_in_age_tables(p_user_Id INT)
RETURNS INT
BEGIN
    DECLARE v_count INT;

    SELECT COUNT(*) INTO v_count
    FROM Child C, Adult A, Teen T
    WHERE C.User_Id = p_user_Id OR A.User_Id = p_user_Id OR T.User_Id = p_user_Id;

    RETURN v_count;
END;
//

DELIMITER //
CREATE TRIGGER check_user_age_constraint
BEFORE INSERT ON users
FOR EACH ROW
BEGIN
    IF user_exists_in_age_tables(NEW.Id) > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'User already exists in age tables';
    END IF;
END;
//

CREATE TRIGGER checks_user_age_constraint
BEFORE UPDATE ON users
FOR EACH ROW
BEGIN
    IF user_exists_in_age_tables(NEW.Id) > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'User already exists in age tables';
    END IF;
END;
//